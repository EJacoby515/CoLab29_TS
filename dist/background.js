chrome.action.onClicked.addListener((s=>{chrome.scripting.executeScript({target:{tabId:s.id},files:["contentScript.js"]})})),chrome.runtime.onMessage.addListener((function(s,e,t){if("hello"===s.greeting)t({farewell:"goodbye"});else{if("startup"===s.action){try{chrome.storage.sync.get(["focusData"]).then((s=>{const e=s.focusData;if(!e||e.currentGoal&&0===Object.keys(e.currentGoal).length){const s={currentGoal:{subtasks:[]},assessments:e&&e.assessments||{}};chrome.storage.sync.set({focusData:s}).then((()=>{t("onboarding")})).catch((s=>{t(s.message)}))}else t("returning")})).catch((s=>{t(s.message)}))}catch(s){t(s.message)}return!0}if("fetchGoals"===s.action)return chrome.storage.sync.get(["focusData"]).then((s=>{const e=(s.focusData||{}).currentGoal||{},a=e.name||"",c=e.subtasks||[];t({goal:a,subtasks:c})})),!0;if("appendCurrentGoal"===s.action){const{data:e}=s;return chrome.storage.sync.get(["focusData"]).then((s=>{const a=s.focusData||{};a.currentGoal={name:e},chrome.storage.sync.set({focusData:a}).then((()=>{t(a)}))})),!0}if("appendSubtasks"===s.action){const{data:e}=s;return console.log(e),chrome.storage.sync.get(["focusData"]).then((s=>{const a=s.focusData||{};a.currentGoal=a.currentGoal||{},a.currentGoal.subtasks=a.currentGoal.subtasks||[];for(let s=0;s<e.length;s++){let t={name:e[s],completed:!1,studynotes:null};a.currentGoal.subtasks.push(t)}chrome.storage.sync.set({focusData:a}).then((()=>{t(a)}))})),!0}if("fetchAssessment"===s.action){const{sunday:e}=s;try{chrome.storage.sync.get(["focusData"],(s=>{const a=(s.focusData||{}).assessments||{};t(a[e]||null)}))}catch(s){console.error("Error fetching assessments:",s),t(null)}return!0}if("appendAssessment"===s.action){const{weekKey:e,dayOfWeek:a,assessment:c}=s;return chrome.storage.sync.get(["focusData"],(s=>{const n=s.focusData||{};n.currentGoal=n.currentGoal||{},n.assessments=n.assessments||{},n.assessments[e]||(n.assessments[e]={}),n.assessments[e][a]||(n.assessments[e][a]=[]),n.assessments[e][a].push(c),chrome.storage.sync.set({focusData:n},(()=>{const s=n.assessments,c={[e]:{[a]:s[e][a]}};t(c)}))})),!0}if("clearGoal"===s.action)return chrome.storage.sync.get(["focusData"]).then((s=>{let e=s.focusData||{currentGoal:{}};e.currentGoal={},chrome.storage.sync.set({focusData:e}).then((()=>{t("cleared")})).catch((s=>{t({error:s.message})}))})).catch((s=>{t({error:s.message})})),!0}if("saveQuickNotes"===s.action){const{notes:e}=s;return chrome.storage.sync.set({quickNotes:e}).then((()=>{t({success:!0})})).catch((s=>{t({success:!1,error:s.message})})),!0}if("convertQuickNotes"===s.action){const{format:e}=s;return chrome.storage.sync.get(["quickNotes"]).then((s=>{const a=s.quickNotes||"";let c="";switch(e){case"doc":case"txt":c=`${a}`;break;case"pdf":c=`\n              <html>\n                <head>\n                  <title>Quick Notes</title>\n                  <style>\n                    body { font-family: Arial, sans-serif; }\n                  </style>\n                </head>\n                <body>${a}</body>\n              </html>\n            `;break;default:return void t({error:"Invalid format"})}const n=new Blob([c],{type:"pdf"===e?"application/pdf":`text/${e}`}),o=URL.createObjectURL(n);chrome.downloads.download({url:o,filename:`quicknotes.${e}`,conflictAction:"uniquify"}),t({success:!0})})).catch((s=>{t({success:!1,error:s.message})})),!0}}));